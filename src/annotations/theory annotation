What is an Annotation?

An annotation in Java is a special kind of metadata (tag) that can be added to code elements like classes, methods, variables, parameters, packages etc.

Annotations do not change the actual logic of the program.

They provide information to the compiler, JVM, or frameworks/tools.

They can be used for instructions, documentation, and runtime processing.

Think of annotations as labels or instructions attached to code.


Built-in Annotations

Java provides some built-in annotations:

âœ… 1. Compiler-level annotations

@Override â†’ ensures method is overriding a superclass method.

@Deprecated â†’ marks method/class as deprecated (compiler warns).

@SuppressWarnings â†’ suppress compiler warnings.

  âœ… 2 meta-annotations (annotations that apply to other annotations)

@Retention â†’ specifies how long the annotation is retained (source, class, or runtime).

@Target â†’ defines where the annotation can be applied (method, field, type, etc.).

@Documented â†’ makes annotation appear in Javadoc.

@Inherited â†’ allows subclass to inherit the annotation from superclass.


ðŸ”¹ Custom Annotations

You can create your own annotations.


import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)   // keep it at runtime
@Target(ElementType.METHOD)          // can be applied to methods
@interface MyAnnotation {
}

ðŸ”¹ Types of Annotations by Retention

SOURCE â†’ available only in source code, discarded during compilation.
Example: @Override

CLASS â†’ stored in class file, but not available at runtime.
Example: some compiler annotations.

RUNTIME â†’ available at runtime via reflection.
Example: @Deprecated, custom runtime annotations.

ðŸ”¹ Real-World Uses of Annotations

Spring Framework â†’ @Autowired, @Controller, @Service

Hibernate/JPA â†’ @Entity, @Id, @Table

JUnit/TestNG â†’ @Basics_programs_and_java_concepts.Test, @Before, @After

REST APIs â†’ @GET, @POST, @Path
